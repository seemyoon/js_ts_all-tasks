const b = [1, 2, 3, 4, 5]

for (let i = 0; i < 5; i++) {
    setTimeout(() => {
        console.log(b[i])
    }, 1000)
}
for (var i = 0; i < 5; i++) {
    setTimeout(() => {
        console.log(b[i])
    }, 1000)
}

// var i буде видно скрізь: (Всередині циклу Всередині setTimeout Після циклу), наприклад скрізь мається на увазі тут:
//     for (var i = 0; i < 5; i++) {
//         setTimeout(() => {
//             console.log(b[i]);
//         }, 1000);
//     }
// ТОБТО let створює нову область видимості кожну ітерацію, var — одну загальну змінну всім.

//Для кожної ітерації створюється своя копія i.
// Коли i = 5, умова i < 5 → false, нова ітерація не створюється, тому 5 взагалі не видно.
// Жодної console.log(5) не відбудеться.
//Результат:
// 1
// 2
// 3
// 4
// 5

// i - одна змінна на всі ітерації (все бачить той самий i).
// Після циклу i = 5.
// Усі setTimeout використовують це значення i = 5, тому що бачать його із загальної області видимості.
//Результат:
// undefined
// undefined
// undefined
// undefined
// undefined